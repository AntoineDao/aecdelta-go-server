/*
 * aecdeltas
 *
 * The AEC Deltas OpenAPI Spec
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    store "github.com/myname/myrepo/pkg/store"
	//
	store "github.com/antoinedao/aecdelta-go-server/pkg/store"
)

// ProjectsGet - Query projects and retrieve a list. Will only return projects user has &#x60;read&#x60; acces to.
func ProjectsGet(c *gin.Context) {
	// Get stream query parameter
	stream := c.DefaultQuery("stream", "")

	// Get name query parameter
	name := c.DefaultQuery("name", "")

	// Get permission query parameter
	permission := c.DefaultQuery("permission", "")

	// Initialise response object
	response := []Project{}

	// Execute operation from the store package
	err := store.ProjectsGet(c, &response, stream, name, permission)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(200, response)
}

// ProjectsIdDelete - Delete a project. Requires &#x60;admin&#x60; access to that project.
func ProjectsIdDelete(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Set default response
	response := "Accepted"

	// Execute operation from the store package
	err := store.ProjectsIdDelete(c, id)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(202, response)
}

// ProjectsIdGet - Get a project by ID. Required &#x60;read&#x60; access to that project.
func ProjectsIdGet(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Initialise response object
	response := Project{}

	// Execute operation from the store package
	err := store.ProjectsIdGet(c, &response, id)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(200, response)
}

// ProjectsIdPut - Update a project&#39;s properties. Requires &#x60;write&#x60; access to that project.
func ProjectsIdPut(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Get newProject payload
	var newProject NewProject
	c.BindJSON(&newProject)

	// Set default response
	response := "Accepted"

	// Execute operation from the store package
	err := store.ProjectsIdPut(c, id, newProject)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(202, response)
}

// ProjectsPost - Create a new project.
func ProjectsPost(c *gin.Context) {
	// Get newProject payload
	var newProject NewProject
	c.BindJSON(&newProject)

	// Initialise response object
	response := Created{}

	// Execute operation from the store package
	err := store.ProjectsPost(c, &response, newProject)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(201, response)
}
