/*
 * aecdeltas
 *
 * The AEC Deltas OpenAPI Spec
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"

	//    auth "github.com/myname/myrepo/pkg/auth"
	//
	auth "github.com/antoinedao/aecdelta-go-server/pkg/auth"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	router.Use(auth.AuthenticationRequired())
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/",
		Index,
	},

	{
		"ProjectsGet",
		http.MethodGet,
		"/projects",
		ProjectsGet,
	},

	{
		"ProjectsIdDelete",
		http.MethodDelete,
		"/projects/:id",
		ProjectsIdDelete,
	},

	{
		"ProjectsIdGet",
		http.MethodGet,
		"/projects/:id",
		ProjectsIdGet,
	},

	{
		"ProjectsIdPut",
		http.MethodPut,
		"/projects/:id",
		ProjectsIdPut,
	},

	{
		"ProjectsPost",
		http.MethodPost,
		"/projects",
		ProjectsPost,
	},

	{
		"RevisionsGet",
		http.MethodGet,
		"/revisions",
		RevisionsGet,
	},

	{
		"RevisionsIdDelete",
		http.MethodDelete,
		"/revisions/:id",
		RevisionsIdDelete,
	},

	{
		"RevisionsIdDiffGet",
		http.MethodGet,
		"/revisions/:id/diff",
		RevisionsIdDiffGet,
	},

	{
		"RevisionsIdGet",
		http.MethodGet,
		"/revisions/:id",
		RevisionsIdGet,
	},

	{
		"RevisionsPost",
		http.MethodPost,
		"/revisions",
		RevisionsPost,
	},

	{
		"StreamsGet",
		http.MethodGet,
		"/streams",
		StreamsGet,
	},

	{
		"StreamsIdBranchPost",
		http.MethodPost,
		"/streams/:id/branch",
		StreamsIdBranchPost,
	},

	{
		"StreamsIdDelete",
		http.MethodDelete,
		"/streams/:id",
		StreamsIdDelete,
	},

	{
		"StreamsIdGet",
		http.MethodGet,
		"/streams/:id",
		StreamsIdGet,
	},

	{
		"StreamsIdMergePost",
		http.MethodPost,
		"/streams/:id/merge",
		StreamsIdMergePost,
	},

	{
		"StreamsIdPut",
		http.MethodPut,
		"/streams/:id",
		StreamsIdPut,
	},

	{
		"StreamsPost",
		http.MethodPost,
		"/streams",
		StreamsPost,
	},

	{
		"TeamsGet",
		http.MethodGet,
		"/teams",
		TeamsGet,
	},

	{
		"TeamsIdDelete",
		http.MethodDelete,
		"/teams/:id",
		TeamsIdDelete,
	},

	{
		"TeamsIdGet",
		http.MethodGet,
		"/teams/:id",
		TeamsIdGet,
	},

	{
		"TeamsIdPut",
		http.MethodPut,
		"/teams/:id",
		TeamsIdPut,
	},

	{
		"TeamsPost",
		http.MethodPost,
		"/teams",
		TeamsPost,
	},

	{
		"UsersGet",
		http.MethodGet,
		"/users",
		UsersGet,
	},

	{
		"UsersIdGet",
		http.MethodGet,
		"/users/:id",
		UsersIdGet,
	},
}
