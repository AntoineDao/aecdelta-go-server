/*
 * aecdeltas
 *
 * The AEC Deltas OpenAPI Spec
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    store "github.com/myname/myrepo/pkg/store"
	//
	store "github.com/antoinedao/aecdelta-go-server/pkg/store"
)

// StreamsGet - Query streams and retrieve a list. Will only return streams the user has &#x60;read&#x60; access to.
func StreamsGet(c *gin.Context) {
	// Get name query parameter
	name := c.DefaultQuery("name", "")

	// Get project query parameter
	project := c.DefaultQuery("project", "")

	// Get schema query parameter
	schema := c.DefaultQuery("schema", "")

	// Initialise response object
	response := []map[string]interface{}{}

	// Execute operation from the store package
	err := store.StreamsGet(c, &response, name, project, schema)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(200, response)
}

// StreamsIdBranchPost - Branch/clone a stream. User must have &#x60;read&#x60; access to the stream.
func StreamsIdBranchPost(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Get branchPayload payload
	var branchPayload BranchPayload
	c.BindJSON(&branchPayload)

	// Initialise response object
	response := Stream{}

	// Execute operation from the store package
	err := store.StreamsIdBranchPost(c, &response, id, branchPayload)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(201, response)
}

// StreamsIdDelete - Delete a stream. The user must have &#x60;admin&#x60; access to the stream.
func StreamsIdDelete(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Set default response
	response := "Accepted"

	// Execute operation from the store package
	err := store.StreamsIdDelete(c, id)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(202, response)
}

// StreamsIdGet - Get a stream by ID. User must have &#x60;read&#x60; access to stream.
func StreamsIdGet(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Initialise response object
	response := Stream{}

	// Execute operation from the store package
	err := store.StreamsIdGet(c, &response, id)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(200, response)
}

// StreamsIdMergePost - Merge two streams. User must have &#x60;write&#x60; access to the stream identified in the url path and &#x60;read&#x60; access to the stream identified in the request body.
func StreamsIdMergePost(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Get mergePayload payload
	var mergePayload MergePayload
	c.BindJSON(&mergePayload)

	// Initialise response object
	response := Stream{}

	// Execute operation from the store package
	err := store.StreamsIdMergePost(c, &response, id, mergePayload)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(202, response)
}

// StreamsIdPut - Update a stream. User must have &#x60;write&#x60; access to the stream.
func StreamsIdPut(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Get newStream payload
	var newStream NewStream
	c.BindJSON(&newStream)

	// Set default response
	response := "Accepted"

	// Execute operation from the store package
	err := store.StreamsIdPut(c, id, newStream)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(202, response)
}

// StreamsPost - Create a new stream. User must have &#x60;contributor&#x60; access to the project the stream belongs to.
func StreamsPost(c *gin.Context) {
	// Get newStream payload
	var newStream NewStream
	c.BindJSON(&newStream)

	// Initialise response object
	response := Created{}

	// Execute operation from the store package
	err := store.StreamsPost(c, &response, newStream)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(201, response)
}
