/*
 * aecdeltas
 *
 * The AEC Deltas OpenAPI Spec
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    store "github.com/myname/myrepo/pkg/store"
	//
	store "github.com/antoinedao/aecdelta-go-server/pkg/store"
)

// RevisionsGet - Query revisions and get a list. The user will only see revisions they have &#x60;read&#x60; access to.
func RevisionsGet(c *gin.Context) {
	// Get stream query parameter
	stream := c.DefaultQuery("stream", "")

	// Initialise response object
	response := Revisions{}

	// Execute operation from the store package
	err := store.RevisionsGet(c, &response, stream)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(200, response)
}

// RevisionsIdDelete - Delete a single revision by ID. User must have &#x60;admin&#x60; permission on the parent stream.
func RevisionsIdDelete(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Set default response
	response := "Accepted"

	// Execute operation from the store package
	err := store.RevisionsIdDelete(c, id)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(202, response)
}

// RevisionsIdDiffGet - Get a diff from two revisions. User must have &#x60;read&#x60; the streams both revisions belong to.
func RevisionsIdDiffGet(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Get to query parameter
	to := c.DefaultQuery("to", "")

	// Initialise response object
	response := Diff{}

	// Execute operation from the store package
	err := store.RevisionsIdDiffGet(c, &response, id, to)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(200, response)
}

// RevisionsIdGet - Get a single revision by ID. User must have &#x60;read&#x60; permission on the parent stream.
func RevisionsIdGet(c *gin.Context) {
	// Get id path parameter
	id := c.Param("id")

	// Initialise response object
	response := Revision{}

	// Execute operation from the store package
	err := store.RevisionsIdGet(c, &response, id)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(200, response)
}

// RevisionsPost - Create a new revision. User must have &#x60;contributor&#x60; permission to the stream the permission belongs to.
func RevisionsPost(c *gin.Context) {
	// Get newRevision payload
	var newRevision NewRevision
	c.BindJSON(&newRevision)

	// Initialise response object
	response := Created{}

	// Execute operation from the store package
	err := store.RevisionsPost(c, &response, newRevision)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(201, response)
}
