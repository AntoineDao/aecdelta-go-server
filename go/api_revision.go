/*
 * aecdeltas
 *
 * The AEC Deltas OpenAPI Spec
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"

	// WARNING!
	// Change this to a fully-qualified import path
	// once you place this file into your project.
	// For example,
	//
	//    store "github.com/myname/myrepo/pkg/store"
	//
	store "github.com/antoinedao/aecdelta-go-server/pkg/store"

)

// RevisionsGet - 
func RevisionsGet(c *gin.Context) {
	// Run Auth checks here

	// Run data store operation
	// `resource` must be of type map[string]interface{}
	resource, err := store.RevisionsGet(c)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(http.StatusOK, resource)
}

// RevisionsIdDelete - 
func RevisionsIdDelete(c *gin.Context) {
	// Run Auth checks here

	// Run data store operation
	// `resource` must be of type map[string]interface{}
	resource, err := store.RevisionsIdDelete(c)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(http.StatusOK, resource)
}

// RevisionsIdDiffGet - 
func RevisionsIdDiffGet(c *gin.Context) {
	// Run Auth checks here

	// Run data store operation
	// `resource` must be of type map[string]interface{}
	resource, err := store.RevisionsIdDiffGet(c)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(http.StatusOK, resource)
}

// RevisionsIdGet - 
func RevisionsIdGet(c *gin.Context) {
	// Run Auth checks here

	// Run data store operation
	// `resource` must be of type map[string]interface{}
	resource, err := store.RevisionsIdGet(c)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(http.StatusOK, resource)
}

// RevisionsPost - 
func RevisionsPost(c *gin.Context) {
	// Run Auth checks here

	// Run data store operation
	// `resource` must be of type map[string]interface{}
	resource, err := store.RevisionsPost(c)

	if err != nil {
		c.AbortWithStatusJSON(err.StatusCode(), err)
	}

	c.JSON(http.StatusOK, resource)
}
